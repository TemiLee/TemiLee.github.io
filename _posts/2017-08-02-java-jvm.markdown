---
layout: post
title:  "JVM Memory Model"
date:   2017-08-02 05:01:29 +0100
tags: [JAVA,JVM]
author: Temi Lee
---
Java jvm 的全面分析。对于一名`javaer`来说深入了解下 `jvm` 的内部构造对于我们了解程序的执行原理、优化代码执行、排查性能瓶颈是很有帮助的。

**jvm 内存模型**
===========
>先上一张图:
>
>![jvm 内存模型][1]

***
**方法区**
* 方法区 `在HotSpot 虚拟机上又称为永久代` 用于存储已经被虚拟机加载过的类信息，常量，静态变量
* 运行时常量池，是方法区的一部分，用于存放编译期生成的各种字面量和符号引用(其实就是八大基本类型的包装类型和String类型数据)
    - <div class="smalltext"> 从JDK7开始永久代的移除工作，贮存在永久代的一部分数据已经转移到了Java Heap或者是Native Heap。但永久代仍然存在于JDK7</div>
    - <div class="smalltext"> 在JDK1.7中，已经把原本放在方法区的字符串常量池移出。将interned String移到Java堆中;符号引用(Symbols)转移到了native heap;字面量(interned strings)转移到了java heap;类的静态变量(class statics)转移到了java heap。</div>
    - <div class="smalltext">JDK8中，JVM不再有PermGen。但类的元数据信息（metadata）还在，只不过不再是存储在连续的堆空间上，而是移动到叫做“Metaspace”的本地内存（Native memory）中</div>
* 可以通过**-XX:PermSize** 和 **-XX:MaxPermSize** 参数限制方法区的大小
* 当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。

***
**堆**
* 此内存区域的作用是存放`对象实例`，也是垃圾收集器管理的主要区域
* 堆又划分为：新生代`包括三部分：Eden空间，From Survivor空间，To Survivor空间`、老年代 `默认比例为8：1`
![jvm heap][2]
    - <div class="smalltext">`-XX:NewSize和-XX:MaxNewSize` 设置年轻代的大小，建议设为整个堆大小的 $\frac{1}{3}$  或者$\frac{1}{4}$,两个值设为一样大。</div>
    - <div class="smalltext">`-XX:SurvivorRatio` 用于设置Eden和其中一个Survivor的比值</div>
    - <div class="smalltext">-XX:NewRatio设置新生代与老年代在堆空间的比值</div>
    - <div class="smalltext"> `-XX:MaxPermSize`永久代大小调整 </div>
    - <div class="smalltext">`-XX:InitialTenuringThreshol和-XX:MaxTenuringThreshold` 用于设置晋升到老年代的对象年龄的`最小值`和`最大值`，每个对象在坚持过一次Minor GC之后，年龄就加1。</div>
    - <div class="smalltext">在GC开始的时候，对象只会存在于Eden区和名为“From”的Survivor区，Survivor区“To”是空的。紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”  <sup>1</sup>，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中，没有达到阈值的对象会被复制到“To”区域   <sup>2</sup>。经过这次GC后，Eden区和From区已经被清空。这个时候，“From”和“To”会交换他们的角色   <sup>3</sup>，也就是新的“To”就是上次GC前的“From”，新的“From”就是上次GC前的“To”。不管怎样，都会保证名为To的Survivor区域是空的。Minor GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。  <sup>4</sup></div>
* 可以通过**-Xmx**和**-Xms**控制 堆大小

**棧**
* 棧主要保存运行时的线程局部信息。*eg:* `局部变量表`、`操作数棧`、`返回地址`
* 当内存不足分配时，将抛出`OutOfMemoryError`异常。
* 当方法调用层级过深时，将抛出`StackOverflowError`异常。

***

**垃圾回收**
===========

* **first of all** <sup>一切的开始</sup>：`可达性分析`
> <div class="smalltext">对象引用遍历从一组对象开始<sup>GC Root</sup>，沿着整个对象图上的每条链接，递归确定可到达（reachable）的对象。如果某对象不能从这些根对象的一个（至少一个）到达，则将它作为垃圾收集。在对象遍历阶段，GC必须记住哪些对象可以到达，以便删除不可到达的对象，这称为标记（marking）对象。</div>
> <div class="smalltext">Tips: 引用计数法面临的问题－－－－> 无法处理循环引用的情况</div>

* 垃圾回收算法：
    - 标记-清除算法 (Mark-Sweep)
        + <div class="smalltext">标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。一种可行的实现是，在标记阶段首先通过根节点，标记所有从根节点开始的较大对象$^1$。因此，未被标记的对象就是未被引用的垃圾对象。然后，在清除阶段，清除所有未被标记的对象$^2$。该算法最大的问题是<u>存在大量的空间碎片</u>，因为回收后的空间是不连续的。在对象的堆空间分配过程中，尤其是大对象的内存分配，`不连续的内存空间的工作效率要低于连续的空间。`</div>
    - 复制算法 (Copying)
        + <div class="smalltext">将现有的内存空间分为两快，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</div>
        + <div class="smalltext">如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大。因此在真正需要垃圾回收的时刻，复制算法的效率是很高的。又由于对象在垃圾回收过程中统一被复制到新的内存空间中，因此，可确保回收后的内存空间是没有碎片的。该算法的缺点是将系统内存折半。</div>
        + <div class="smalltext">在垃圾回收时，eden 空间中的存活对象会被复制到未使用的 survivor 空间中 (假设是 to)，正在使用的 survivor 空间 (假设是 from) 中的年轻对象也会被复制到 to 空间中 (大对象，或者老年对象会直接进入老年带，如果 to 空间已满，则对象也会直接进入老年代)。此时，eden 空间和 from 空间中的剩余对象就是垃圾对象，可以直接清空，to 空间则存放此次回收后的存活对象。这种改进的复制算法既保证了空间的连续性，又避免了大量的内存空间浪费。</div>
    - 标记-压缩算法 (Mark-Compact) <sup>标记-整理</sup>
        + <div class="smalltext">标记-压缩算法是一种老年代的回收算法，它在标记-清除算法的基础上做了一些优化。也首先需要从根节点开始对所有可达对象做一次标记，但之后，它并不简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。之后，清理边界外所有的空间。这种方法既避免了碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高。</div>

    - TIPS:
        > <div class="smalltext">STW(Stop-The-World) :Java中一种全局暂停现象，全局停顿，所有Java代码停止,native代码可以执行，但不能与JVM交互.在执行垃圾收集算法时，Java应用程序的其他所有线程都被挂起（除了垃圾收集帮助器之外）</div>

**来点干货** <span>![干货来袭][4]</span>
===========

* 我们的tomcat启动参数：
```
-Djava.util.logging.config.file=/home/work/y.davdian.com/conf/logging.properties
-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.awt.headless=true
-Dfile.encoding=UTF8 -Xms3G -Xmx3G -Xmn1G -XX:PermSize=512m -XX:MaxPermSize=512m
-Djava.awt.headless=true -Dfile.encoding=UTF8 -XX:+DisableExplicitGC -Xloggc:/home/work/y.davdian.com/var/gc.log
-verbose:gc -XX:+PrintGC -XX:+PrintGCDetails -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/work/y.davdian.com/var/ -Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=10.51.124.160 -Dcom.sun.management.jmxremote.port=18018 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.endorsed.dirs=/home/service/tomcat/endorsed -Dcatalina.base=/home/work/y.davdian.com -Dcatalina.home=/home/service/tomcat -Djava.io.tmpdir=/home/work/y.davdian.com/temp -Dlog.root=/data/logs/tomcat_logs/**.****.com
```
* jps、jstack、jmap、jhat、jstat使用详解
    - <div class="smalltext">jps(Java Virtual Machine Process Status Tool) 输出JVM中运行的进程状态信息。<br> jps [options] [hostid] </div>
        + <div class="smalltext">-q不输出类名、Jar名和传入main方法的参数</div>
        + <div class="smalltext">-m 输出传入main方法的参数</div>
        +  <div class="smalltext">-l 输出main类或Jar的全限名</div>
        + <div class="smalltext">-v 输出传入JVM的参数</div>
        + *eg:* jps -v -m -l
            ```
            12258 org.jetbrains.idea.maven.server.RemoteMavenServer -Djava.awt.headless=true -Didea.version==2016.3.1 -Xmx768m -Didea.maven.embedder.version=3.3.9 -Dfile.encoding=UTF-8
            306  -Dfile.encoding=UTF-8 -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -Xverify:none -XX:ErrorFile=/Users/wangfei/java_error_in_idea_%p.log -XX:HeapDumpPath=/Users/wangfei/java_error_in_idea.hprof -Xbootclasspath/a:../lib/boot.jar -Xms128m -Xmx750m -XX:ReservedCodeCacheSize=240m -XX:+UseCompressedOops -Djb.vmOptionsFile=/Users/wangfei/Library/Preferences/IntelliJIdea2016.3/idea.vmoptions -Didea.java.redist=jdk-bundled -Didea.home.path=/Applications/IntelliJ IDEA.app/Contents -Didea.executable=idea -Didea.paths.selector=IntelliJIdea2016.3
            309  -Dfile.encoding=UTF-8 -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -Xverify:none -XX:ErrorFile=/Users/wangfei/java_error_in_webstorm_%p.log -XX:HeapDumpPath=/Users/wangfei/java_error_in_webstorm.hprof -Xbootclasspath/a:../lib/boot.jar -Xms128m -Xmx750m -XX:ReservedCodeCacheSize=240m -XX:+UseCompressedOops -Djb.vmOptionsFile=/Applications/WebStorm.app/Contents/bin/webstorm.vmoptions -Didea.java.redist=jdk-bundled -Didea.home.path=/Applications/WebStorm.app/Contents -Didea.executable=webstorm -Didea.platform.prefix=WebStorm -Didea.paths.selector=WebStorm2016.3
            13324 sun.tools.jps.Jps -v -m -l -Dapplication.home=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home -Xms8m
            ```

    - <div class="smalltext">jstack主要用来查看某个Java进程内的线程堆栈信息</div>
        + <div class="smalltext">jstack [option] pid</div>
        + <div class="smalltext">jstack [option] [server-id@]remote-hostname-or-ip</div>
        + <div class="smalltext">-l long listings，会打印出额外的锁信息，在发生死锁时可以用jstack -l pid来观察锁持有情况</div>
     -  <div class="smalltext">jmap（Memory Map）和jhat（Java Heap Analysis Tool）jmap用来查看堆内存使用状况,</div>
        - <div class="smalltext">jmap [option] pid</div>
        - <div class="smalltext">jmap [option] executable core</div>
        - <div class="smalltext">jmap [option] [server-id@]remote-hostname-or-ip</div>
        - <div class="smalltext">jmap -permstat pid 查看永久区内存信息</div>
        - <div class="smalltext">jmap -histo[:live] pid 查看堆内存中的对象数目、大小统计直方图</div>
        - <div class="smalltext">jmap -dump:format=b,file=dumpFileName 把进程内存使用情况dump到文件中 <u>之后可用jhat分析</u></div>
        - *eg:* jmap -heap 20581
             ```
             Heap Configuration:
                MinHeapFreeRatio = 0
                MaxHeapFreeRatio = 100
                MaxHeapSize      = 3221225472 (3072.0MB)
                NewSize          = 1073741824 (1024.0MB)
                MaxNewSize       = 1073741824 (1024.0MB)
                OldSize          = 5439488 (5.1875MB)
                NewRatio         = 2
                SurvivorRatio    = 8
                PermSize         = 536870912 (512.0MB)
                MaxPermSize      = 536870912 (512.0MB)
                G1HeapRegionSize = 0 (0.0MB)

             Heap Usage:
             PS Young Generation
             Eden Space:
                capacity = 969408512 (924.5MB)
                used     = 83104416 (79.25454711914062MB)
                free     = 886304096 (845.2454528808594MB)
                8.572693036142848% used
             From Space:
                capacity = 52428800 (50.0MB)
                used     = 36702544 (35.00227355957031MB)
                free     = 15726256 (14.997726440429688MB)
                70.00454711914062% used
             To Space:
                capacity = 51904512 (49.5MB)
                used     = 0 (0.0MB)
                free     = 51904512 (49.5MB)
                0.0% used
             PS Old Generation
                capacity = 2147483648 (2048.0MB)
                used     = 295669448 (281.9723587036133MB)
                free     = 1851814200 (1766.0276412963867MB)
                13.768181577324867% used
             PS Perm Generation
                capacity = 536870912 (512.0MB)
                used     = 113368888 (108.11699676513672MB)
                free     = 423502024 (403.8830032348633MB)
                21.116600930690765% used

             68575 interned Strings occupying 7170008 bytes.
             ```

            - *eg:* 对dump出的文件进行分析：

              ```
                - jmap -dump:format=b,file=/tmp/dump.dat 21711
                - jhat -port 9998 /tmp/dump.dat
                - Reading from /tmp/dump.dat...
                  Dump file created Tue Jan 28 17:46:14 CST 2014
                  Snapshot read, resolving...
                  Resolving 132207 objects...
                  Chasing references, expect 26 dots..........................
                  Eliminating duplicate references..........................
                  Snapshot resolved.
                  Started HTTP server on port 9998
                  Server is ready.


                - 之后边可通过浏览器查看堆中存活的对象信息：
              ```
              > ![jhat查看堆内存信息][3]

     - jstat（JVM统计监测工具）:
        - jstat \[generalOption \| outputOptions vmid \[interval\[s\|ms\] \[count\]\] \]
        - `vmid是进程ID,interval是采样时间间隔,count是采样数目`
        - ```
            [root(0)@******* 01:04:25 /tmp]# jstat -gc 20581 50 1
             S0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT
            52736.0 11776.0  0.0   11654.5 948736.0 652891.6 2097152.0   289431.6  524288.0 111105.0    129    7.437   0      0.000    7.437
            ```
        - 其中各列含义分别为：
            ```
            S0C、S1C、S0U、S1U：Survivor 0/1区容量（Capacity）和使用量（Used）
            EC、EU：Eden区容量和使用量
            OC、OU：年老代容量和使用量
            PC、PU：永久代容量和使用量
            YGC、YGT：年轻代GC次数和GC耗时
            FGC、FGCT：Full GC次数和Full GC耗时
            GCT：GC总耗时
            ```

[1]: /img/jvm.png
[2]: /img/jvmheap.jpg
[3]: /img/jhat.png
[4]: /img/ease.jpeg