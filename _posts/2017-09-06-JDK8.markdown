---
layout: post
title:  "JDK 1.8 Feature"
date:   2017-09-06 05:01:29 +0100
tags: [JAVA]
author: Temi Lee
<!-- modifyauthor: Temi Lee -->
<!-- lastmodify: 2017-08-08 01:27:29 -->
<!-- published: false -->
---

JDK 1.8 新特性

**Lambda表达式和函数式接口**

`Lambda表达式`：Lambda表达式（也称为闭包）, 它允许我们将函数当成参数传递给某个方法，或者把代码本身当作数据处理
在 JDK1.8 之前只能使用匿名内部类代替Lambda表达式。

*1.最简单的Lambda表达式由逗号分隔的`参数列表`、`->`符号和`语句块`组成，`(parameters) -> expression` 例如：*
{% highlight java %}
    //这里 e 的参数类型由编译器推理得出
    Arrays.asList( "a", "b", "d" ).forEach( e -> System.out.println( e ) );

    //也可以这样显示指出参数类型
    Arrays.asList( "a", "b", "d" ).forEach( ( String e ) -> System.out.println( e ) );

    //可以使用 大括号 构成语句块
    Arrays.asList( "a", "b", "d" ).forEach( e -> {
        System.out.print( e );
        System.out.print( e );
    } );
{% endhighlight %}

*2.Lambda表达式如果引用`类成员`和`局部变量`,会将这些变量隐式得转换成`final`的，例如下列两个代码块的效果完全相同：*
{% highlight java %}
    String separator = ",";
    Arrays.asList( "a", "b", "d" ).forEach(
    ( String e ) -> System.out.print( e + separator ) );
{% endhighlight %}

{% highlight java %}
    final String separator = ",";
    Arrays.asList( "a", "b", "d" ).forEach(
    ( String e ) -> System.out.print( e + separator ) );
{% endhighlight %}

*3.Lambda表达式有返回值，返回值的类型也由编译器推理得出。如果Lambda表达式中的语句块只有一行，则可以不用使用return语句:*
{% highlight java %}
    Arrays.asList( "a", "b", "d" ).sort( ( e1, e2 ) -> e1.compareTo( e2 ) );
{% endhighlight %}
{% highlight java %}
    Arrays.asList( "a", "b", "d" ).sort( ( e1, e2 ) -> {
        int result = e1.compareTo( e2 );
        return result;
    } );
{% endhighlight %}

`函数接口 :` 函数接口指的是只有一个函数的接口，这样的接口可以`隐式转换为Lambda表达式`.
@FunctionalInterface 注解可用来显式说明某个接口是函数式接口(`默认方法和静态方法不会破坏函数式接口的定义`)

***

**接口增加默认方法和静态方法**

***

**方法引用**


***
在新的java.time包中,增加时间处理API

**现有时间API的一些局限:**
- 日期和时间用例支持不足。(现有的类（如 java.util.Date 和 SimpleDateFormatter）不是线程安全的，导致用户可能遇到并发问题 — 这不是普通开发人员编写日期处理代码时想要的结果。)
- 有些日期和时间类暴露出相当拙劣的 API 设计。例如，java.util.Date 中的年份从 1900 开始，月份从 1 开始，日期从 0 开始 — 不是很直观。

**新的日期处理API核心思想:**
- `不可变值类。` Java 中现有的格式化处理类 (formatter) 的一个严重缺陷就是它们不是线程安全的。这就给开发人员带来了麻烦，需要以线程安全的方式使用它们，并在日常开发处理日期的代码时考虑到并发问题。新的 API 确保了所有核心类是不可变的并且代表明确定义的值，避免了这一问题。
- `领域驱动设计`。新的 API 使用贴切代表 Date 和 Time 不同用例的类实现了精确的领域建模。以前的 Java 库在这方面的表现相当差。例如，java.util.Date 代表一个时间点，从 UNIX 时代开始就以毫秒数的形式保存，但您调用 toString() 时，结果却显示它有时区的概念，这就容易让开发人员产生歧义。
- `区分历法体系。` 新的 API 允许人们使用不同的历法体系，以支持世界上某些不一定遵循 ISO-8601 的地区（如日本或泰国）用户的需求。新的 API 不会给大多数开发人员增加额外的负担，他们只需要使用标准历法。
- 新 API 中的所有核心类均使用流畅的工厂方法构造。通过组成字段构造值时，工厂名为 of；从其他类型转换时，工厂名为 from。而且，还有些 parse 方法接受字符串作为参数。

*LocalDate:*

{% highlight java %}
    LocalDateTime timePoint = LocalDateTime.now();     // 获取当前时间和日期
    LocalDate.of(2012, Month.DECEMBER, 12); // 由值构造日期
    LocalDate.ofEpochDay(150);  // 1970 的第150天
    LocalTime.of(17, 18); // 由值构造时间
    LocalTime.parse("10:15:30"); // 由String 进行解析
    LocalDate theDate = timePoint.toLocalDate(); // 时间领域转变
    Month month = timePoint.getMonth(); //获取月份
    int day = timePoint.getDayOfMonth(); //获取日期
    timePoint.getSecond(); //秒
{% endhighlight %}