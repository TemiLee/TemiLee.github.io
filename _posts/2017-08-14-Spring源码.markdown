---
layout: post
title:  "Spring Resource"
date:   2017-08-13 16:54:13
tags: [JAVA,SPRING]
author: Temi Lee
lastmodify: 2017-08-13 19:17:33
modifyauthor: Temi Lee
---

最近看了一下Spring的源码，主要是了解下spring的启动流程和运行原理，我的项目中使用了
Spring MVC ,在配置了SpringMVC 的 DispatcherServlet后springbean容器的初始化由MVC启动类DispatcherServlet 触发

<br/>
本文基于Spring 的4.3.2.RELEASE版本

**DispatcherServlet:类图**
![DispatcherServlet][1]

我们知道Servlet拥有一个空的初始化方法: `init()`,初步猜测SpringMVC在此方法中初始化
Bean容器 `webApplicationContext`,事实上整个创建webApplicationContext的过程都是在
DispatcherServlet的父类FrameworkServlet中完成的

HttpServletBean覆盖了HttpServlet的 `init()` 方法:

{% highlight java %}
HttpServletBean.java

/**
 * Map config parameters onto bean properties of this servlet, and
 * invoke subclass initialization.
 *
 * 将设置的参数映射到指定servlet的属性上，并触发子类的初始化
 *
 * @throws ServletException if bean properties are invalid (or required
 * properties are missing), or if subclass initialization fails.
 */
@Override
public final void init() throws ServletException {
    if (logger.isDebugEnabled()) {
        logger.debug("Initializing servlet '" + getServletName() + "'");
    }
    // Set bean properties from init parameters.
    try {
        PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);
        BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);
        ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());
        bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));
        initBeanWrapper(bw);
        bw.setPropertyValues(pvs, true);
    }
    catch (BeansException ex) {
        logger.error("Failed to set bean properties on servlet '" + getServletName() + "'", ex);
        throw ex;
    }
    // Let subclasses do whatever initialization they like.
    // 模版方法，让子类实现特定的初始化，webApplicationContext 的初始化就是在子类
    // FrameworkServlet 覆盖的此方法中
    initServletBean();
    if (logger.isDebugEnabled()) {
        logger.debug("Servlet '" + getServletName() + "' configured successfully");
    }
}
{% endhighlight %}

FrameworkServlet的 `initServletBean()` 方法:

{% highlight java %}
FrameworkServlet.java

/**
 * Overridden method of {@link HttpServletBean}, invoked after any bean properties
 * have been set. Creates this servlet's WebApplicationContext.
 *
 * 覆盖了HttpServletBean方法，在所有Bean的属性设置后被调用，创建这个Servlet的WebApplicationContext
 *
 */
@Override
protected final void initServletBean() throws ServletException {
    getServletContext().log("Initializing Spring FrameworkServlet '" + getServletName() + "'");
    if (this.logger.isInfoEnabled()) {
        this.logger.info("FrameworkServlet '" + getServletName() + "': initialization started");
    }
    long startTime = System.currentTimeMillis();
    try {
        // 在这里初始化 WebApplicationContext
        this.webApplicationContext = initWebApplicationContext();
        initFrameworkServlet();
    }
    catch (ServletException ex) {
        this.logger.error("Context initialization failed", ex);
        throw ex;
    }
    catch (RuntimeException ex) {
        this.logger.error("Context initialization failed", ex);
        throw ex;
    }
    if (this.logger.isInfoEnabled()) {
        long elapsedTime = System.currentTimeMillis() - startTime;
        this.logger.info("FrameworkServlet '" + getServletName() + "': initialization completed in " +
                elapsedTime + " ms");
    }
}
{% endhighlight %}

接着看一下 `initWebApplicationContext` 方法:

{% highlight java %}
FrameworkServlet.java

/**
 * Initialize and publish the WebApplicationContext for this servlet.
 * <p>Delegates to {@link #createWebApplicationContext} for actual creation
 * of the context. Can be overridden in subclasses.
 *
 * 初始化Servlet的 WebApplicationContext，这个方法内部是调用createWebApplicationContext
 * 实现的 ApplicationContext 的创建
 *
 * @return the WebApplicationContext instance
 * @see #FrameworkServlet(WebApplicationContext)
 * @see #setContextClass
 * @see #setContextConfigLocation
 */
protected WebApplicationContext initWebApplicationContext() {

    //这里其实就是去本 ServletContext 里面去区指定的值为 ApplicationContext 的属性
    //补充下 ServletContext 的知识：
    //一个全局的储存信息的空间，服务器开始，其就存在，服务器关闭，其才释放，所有servlet共用一个ServletContext

    WebApplicationContext rootContext =
            WebApplicationContextUtils.getWebApplicationContext(getServletContext());
    WebApplicationContext wac = null;

    // 这个条件判断通常是false，当在web.xml中也同时配置了ContextLoaderListener时或者父类已经进行了初始化，这里为true
    if (this.webApplicationContext != null) {
        // A context instance was injected at construction time -> use it
        // 应用在启动过程中已经设置了 webApplicationContext(应用上下文)

        wac = this.webApplicationContext;
        if (wac instanceof ConfigurableWebApplicationContext) {
            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;
            if (!cwac.isActive()) {
                // The context has not yet been refreshed -> provide services such as
                // setting the parent context, setting the application context id, etc
                if (cwac.getParent() == null) {
                    // The context instance was injected without an explicit parent -> set
                    // the root application context (if any; may be null) as the parent
                    cwac.setParent(rootContext);
                }
                configureAndRefreshWebApplicationContext(cwac);
            }
        }
    }
    if (wac == null) {
        // No context instance was injected at construction time -> see if one
        // has been registered in the servlet context. If one exists, it is assumed
        // that the parent context (if any) has already been set and that the
        // user has performed any initialization such as setting the context id
        //
        // 应用启动过程中没有设置 Spring上下文 实例(TODO)
        // 查看这个方法的内部实现我们可以发现，其实在这个方法的内部尝试去用 contextAttribute 属性
        // 的值做为 Key 去 ServletContext 中取指定的属性。
        // 通过这个特性我们可以改变默认的 org.springframework.web.context.WebApplicationContext.ROOT 的key
        // 值，并尝试获取已经注入的其他的上下文实现类
        wac = findWebApplicationContext();
    }
    if (wac == null) {
        // No context instance is defined for this servlet -> create a local one
        // 确定了这个 ServletContext 没有设置 Spring 应用上下文之后 ,进行创建操作
        wac = createWebApplicationContext(rootContext);
    }

    if (!this.refreshEventReceived) {
        // Either the context is not a ConfigurableApplicationContext with refresh
        // support or the context injected at construction time had already been
        // refreshed -> trigger initial onRefresh manually here.
        // 如果不是不支持 refresh 方法的 ConfigurableApplicationContext 应用上下文，
        // 或者在启动过程中已经执行了refresh 方法。那么在这里手动触发 refresh 方法
        //
        // 事实上这个方法也是个模版方法，在这个类中这个方法是一个空的实现，
        // DispatcherServlet 覆盖了一个方法，用于初始化 SpringMVC 内部的一些Bean
        onRefresh(wac);
    }

    if (this.publishContext) {
        // Publish the context as a servlet context attribute.
        // 将bean设置到 ServletContext 中
        String attrName = getServletContextAttributeName();
        getServletContext().setAttribute(attrName, wac);
        if (this.logger.isDebugEnabled()) {
            this.logger.debug("Published WebApplicationContext of servlet '" + getServletName() +
                    "' as ServletContext attribute with name [" + attrName + "]");
        }
    }

    //返回值
    return wac;
}
{% endhighlight %}


看一下真正执行创建 ApplicationContext 实例的方法，高潮终于来了 <span>![Soga][2]</span>

{% highlight java %}
FrameworkServlet.java

    /**
	 * Instantiate the WebApplicationContext for this servlet, either a default
	 * {@link org.springframework.web.context.support.XmlWebApplicationContext}
	 * or a {@link #setContextClass custom context class}, if set.
	 * Delegates to #createWebApplicationContext(ApplicationContext).
	 *
	 * 为本 servlet 实例化一个 WebApplicationContext 的对象(默认的 XmlWebApplicationContext
	 * 实例，或者通过调用 setContextClass 方法设置的 class 的实例).
	 * 这个方法调用 重载的 createWebApplicationContext(ApplicationContext) 方法执行真正的创建操作
	 *
	 * @param parent the parent WebApplicationContext to use, or {@code null} if none
	 * @return the WebApplicationContext for this servlet
	 * @see org.springframework.web.context.support.XmlWebApplicationContext
	 * @see #createWebApplicationContext(ApplicationContext)
	 */
	protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {
		return createWebApplicationContext((ApplicationContext) parent);
	}

{% endhighlight %}

看下重载的 createWebApplicationContext(ApplicationContext) 方法的内容:

{% highlight java %}
FrameworkServlet.java

    /**
	 * Instantiate the WebApplicationContext for this servlet, either a default
	 * {@link org.springframework.web.context.support.XmlWebApplicationContext}
	 * or a {@link #setContextClass custom context class}, if set.
	 *
	 * 翻译见上个方法
	 *
	 * <p>This implementation expects custom contexts to implement the
	 * {@link org.springframework.web.context.ConfigurableWebApplicationContext}
	 * interface. Can be overridden in subclasses.
	 *
	 *
	 *
	 * <p>Do not forget to register this servlet instance as application listener on the
	 * created context (for triggering its {@link #onRefresh callback}, and to call
	 * {@link org.springframework.context.ConfigurableApplicationContext#refresh()}
	 * before returning the context instance.
	 *
	 * 这两段英文含义还不太明白，以后看懂了再翻译(TODO)
	 *
	 * @param parent the parent ApplicationContext to use, or {@code null} if none
	 * @return the WebApplicationContext for this servlet
	 * @see org.springframework.web.context.support.XmlWebApplicationContext
	 */
	protected WebApplicationContext createWebApplicationContext(ApplicationContext parent) {
	    // 获取 contextClass 属性代表的 WebApplicationContext 实现类，默认是:XmlWebApplicationContext.class
		Class<?> contextClass = getContextClass();
		if (this.logger.isDebugEnabled()) {
			this.logger.debug("Servlet with name '" + getServletName() +
					"' will try to create custom WebApplicationContext context of class '" +
					contextClass.getName() + "'" + ", using parent context [" + parent + "]");
		}
		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {
			throw new ApplicationContextException(
					"Fatal initialization error in servlet with name '" + getServletName() +
					"': custom WebApplicationContext class [" + contextClass.getName() +
					"] is not of type ConfigurableWebApplicationContext");
		}
		// 使用反射实例化SpringContext
		// 注意两点，1.调用无参构造 2.如果是接口则抛出异常
		ConfigurableWebApplicationContext wac =
				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);

        //设置一些环境参数
		wac.setEnvironment(getEnvironment());
		//父 SpringContext
		wac.setParent(parent);
		// 设置资源文件位置(web.xml 设置的 contextConfigLocation 属性)
		wac.setConfigLocation(getContextConfigLocation());

        //配置和刷新 ApplicationContext
		configureAndRefreshWebApplicationContext(wac);

		return wac;
	}

{% endhighlight %}

继续 configureAndRefreshWebApplicationContext 这个方法

{% highlight java %}
FrameworkServlet.java

    protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac) {
		if (ObjectUtils.identityToString(wac).equals(wac.getId())) {
			// The application context id is still set to its original default value
			// -> assign a more useful id based on available information

			//在这里设置 context id 默认是org.springframework.web.context.WebApplicationContext:+你项目的
			// ContextPath + "/" + ServletName

			if (this.contextId != null) {
				wac.setId(this.contextId);
			}
			else {
				// Generate default id...
				wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +
						ObjectUtils.getDisplayString(getServletContext().getContextPath()) + "/" + getServletName());
			}
		}

		wac.setServletContext(getServletContext());
		wac.setServletConfig(getServletConfig());
		wac.setNamespace(getNamespace());
		wac.addApplicationListener(new SourceFilteringListener(wac, new ContextRefreshListener()));

		// The wac environment's #initPropertySources will be called in any case when the context
		// is refreshed; do it eagerly here to ensure servlet property sources are in place for
		// use in any post-processing or initialization that occurs below prior to #refresh
		ConfigurableEnvironment env = wac.getEnvironment();
		if (env instanceof ConfigurableWebEnvironment) {
			((ConfigurableWebEnvironment) env).initPropertySources(getServletContext(), getServletConfig());
		}

		postProcessWebApplicationContext(wac);
		applyInitializers(wac);
		wac.refresh();
	}

{% endhighlight %}



AbstractApplicationContext 的 refresh() 方法，这个方法进行Bean配置资源文件的加载、解析、Bean定义的注册、组件初始化
这个方法的实现是同步的，不允许并发调用

这个方法的定义在 `ConfigurableApplicationContext` 接口中，我们先看下这个方法的定义:

{% highlight java %}
ConfigurableApplicationContext.java:

	/**
	 * Load or refresh the persistent representation of the configuration,
	 * which might an XML file, properties file, or relational database schema.
	 * <p>As this is a startup method, it should destroy already created singletons
	 * if it fails, to avoid dangling resources. In other words, after invocation
	 * of that method, either all or no singletons at all should be instantiated.
	 *
	 * 加载或者刷新 配置的持久化文件(xml文件、properties、或者是一个关系数据库定义)
	 * 作为一个初始化方法，如果启动失败，应该销毁已经创建的Bean，以避免资源的闲置(TODO)
	 * 换句话说，在调用了此方法后，所有的Bean都应该加载完成，或者没有加载任何Bean
	 *
	 * @throws BeansException if the bean factory could not be initialized
	 * @throws IllegalStateException if already initialized and multiple refresh
	 * attempts are not supported
	 */
	void refresh() throws BeansException, IllegalStateException;


{% endhighlight %}


AbstractApplicationContext 的 refresh()方法是Spring Bean加载的核心。这个方法的特点：
- 方法加了一个专门的对象(`startUpShutdownMonitor`)锁，好处:防止多线程并发刷新Spring上下文，减小锁的同步范围
- 将整个刷新流程定义为几个子方法，代码结构简单清晰、扩展性强、可维护性高

{% highlight java %}
AbstractApplicationContext.java :

@Override
public void refresh() throws BeansException, IllegalStateException {
    //加锁防止并发调用
    synchronized (this.startupShutdownMonitor) {
        // Prepare this context for refreshing.
        //刷新的准备工作
        prepareRefresh();

        // Tell the subclass to refresh the internal bean factory.
        // 高速子类刷新内部Bean工厂(其实就是子类通过实现这个类的抽象方法提供获取beanFactory的方法
        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

        // Prepare the bean factory for use in this context.
        // 对接下来要在上下文中使用的 Bean 工厂进行一些准备工作
        prepareBeanFactory(beanFactory);

        try {
            // Allows post-processing of the bean factory in context subclasses.
            // 子类可扩展此方法实现Bean工厂的后置处理
            // 这个方法是个空的实现，子类可以覆盖此方法扩展功能
            postProcessBeanFactory(beanFactory);

            // Invoke factory processors registered as beans in the context.
            // 调用在Spring 应用上下文中注册的工厂处理器
            invokeBeanFactoryPostProcessors(beanFactory);

            // Register bean processors that intercept bean creation.
            // 注册Bean创建过程中的拦截处理器
            registerBeanPostProcessors(beanFactory);

            // Initialize message source for this context.
            // 初始化上下文的消息源(TODO,国际化相关?)
            initMessageSource();

            // Initialize event multicaster for this context.
            // TODO
            initApplicationEventMulticaster();

            // Initialize other special beans in specific context subclasses.
            // 在特定的 ApplicationContext 中初始化一些特殊的Bean
            onRefresh();

            // Check for listener beans and register them.
            // 检查并注册监听器 Bean
            registerListeners();

            // Instantiate all remaining (non-lazy-init) singletons.
            // 实例化除了懒加载的所有Bean
            // 真正的bean加载就是在这里完成的
            finishBeanFactoryInitialization(beanFactory);

            // Last step: publish corresponding event.
            // 最后一步：发布相应的事件
            finishRefresh();
        }

        catch (BeansException ex) {
            if (logger.isWarnEnabled()) {
                logger.warn("Exception encountered during context initialization - " +
                        "cancelling refresh attempt: " + ex);
            }

            // Destroy already created singletons to avoid dangling resources.
            // 销毁已经创建的Bean，防止资源闲置，(实现了上面提到的ConfigurableApplicationContext
            // 接口对于 refresh() 方法的约束
            destroyBeans();

            // Reset 'active' flag.
            // 重置 活跃 标志
            cancelRefresh(ex);

            // Propagate exception to caller.
            throw ex;
        }

        finally {
            // Reset common introspection caches in Spring's core, since we
            // might not ever need metadata for singleton beans anymore...

            // 重置Spring中常见的内省缓存，因为我们可能不再需要这些单例Bean的元数据
            resetCommonCaches();
        }
    }
}

{% endhighlight %}


[1]: /img/blog/spring/dispatcherServlet.png
[2]: /img/ease.jpeg